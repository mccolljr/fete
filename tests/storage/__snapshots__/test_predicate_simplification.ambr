# name: test_postgresql_simplify[complex]
  <class 'tuple'> (
    None,
    '(type_field IN (%s, %s, %s) OR (((data_field ? %s AND data_field->%s = %s::jsonb)) AND (coalesce(data_field->%s <> %s::jsonb, true)) AND ((data_field ? %s AND data_field->%s < %s::jsonb))) OR (((data_field ? %s AND data_field->%s > %s::jsonb)) AND ((data_field ? %s AND data_field->%s <= %s::jsonb)) AND ((data_field ? %s AND data_field->%s >= %s::jsonb))) OR (((data_field ? %s AND data_field->%s >= %s::jsonb) AND (data_field ? %s AND data_field->%s <= %s::jsonb)) AND ((data_field ? %s AND data_field->%s = %s::jsonb) OR (data_field ? %s AND data_field->%s = %s::jsonb))))',
    <class 'list'> [
      'int',
      'str',
      'float',
      'a',
      'a',
      '1',
      'b',
      '2',
      'c',
      'c',
      '3',
      'd',
      'd',
      '4',
      'e',
      'e',
      '5',
      'f',
      'f',
      '6',
      'g',
      'g',
      '7',
      'g',
      'g',
      '8',
      'h',
      'h',
      '9',
      'h',
      'h',
      '10',
    ],
  )
---
# name: test_postgresql_simplify[simple_and]
  <class 'tuple'> (
    None,
    '(((data_field ? %s AND data_field->%s = %s::jsonb)) AND ((data_field ? %s AND data_field->%s = %s::jsonb)))',
    <class 'list'> [
      'a',
      'a',
      '1',
      'b',
      'b',
      '2',
    ],
  )
---
# name: test_postgresql_simplify[simple_is]
  <class 'tuple'> (
    None,
    'type_field IN (%s, %s, %s)',
    <class 'list'> [
      'str',
      'int',
      'float',
    ],
  )
---
# name: test_postgresql_simplify[simple_or]
  <class 'tuple'> (
    None,
    '(((data_field ? %s AND data_field->%s = %s::jsonb)) OR ((data_field ? %s AND data_field->%s = %s::jsonb)))',
    <class 'list'> [
      'a',
      'a',
      '1',
      'b',
      'b',
      '2',
    ],
  )
---
# name: test_postgresql_simplify[simple_where]
  <class 'tuple'> (
    None,
    '((data_field ? %s AND data_field->%s = %s::jsonb) AND coalesce(data_field->%s <> %s::jsonb, true) AND (data_field ? %s AND data_field->%s < %s::jsonb) AND (data_field ? %s AND data_field->%s > %s::jsonb) AND (data_field ? %s AND data_field->%s <= %s::jsonb) AND (data_field ? %s AND data_field->%s >= %s::jsonb) AND ((data_field ? %s AND data_field->%s >= %s::jsonb) AND (data_field ? %s AND data_field->%s <= %s::jsonb)) AND ((data_field ? %s AND data_field->%s = %s::jsonb) OR (data_field ? %s AND data_field->%s = %s::jsonb)))',
    <class 'list'> [
      'a',
      'a',
      '1',
      'b',
      '2',
      'c',
      'c',
      '3',
      'd',
      'd',
      '4',
      'e',
      'e',
      '5',
      'f',
      'f',
      '6',
      'g',
      'g',
      '7',
      'g',
      'g',
      '8',
      'h',
      'h',
      '9',
      'h',
      'h',
      '10',
    ],
  )
---
# name: test_sqlite_simplify[complex]
  <class 'tuple'> (
    <class 'Or'> {
      alts=<class 'tuple'> (
        <class 'And'> {
          preds=<class 'tuple'> (
            <class 'Where'> {
              fields=<class 'dict'> {
                'a': <class 'Eq'> {
                  expect=1,
                },
              },
            },
            <class 'Where'> {
              fields=<class 'dict'> {
                'b': <class 'NotEq'> {
                  value=2,
                },
              },
            },
            <class 'Where'> {
              fields=<class 'dict'> {
                'c': <class 'Less'> {
                  limit=3,
                },
              },
            },
          ),
        },
        <class 'And'> {
          preds=<class 'tuple'> (
            <class 'Where'> {
              fields=<class 'dict'> {
                'd': <class 'More'> {
                  limit=4,
                },
              },
            },
            <class 'Where'> {
              fields=<class 'dict'> {
                'e': <class 'LessEq'> {
                  limit=5,
                },
              },
            },
            <class 'Where'> {
              fields=<class 'dict'> {
                'f': <class 'MoreEq'> {
                  limit=6,
                },
              },
            },
          ),
        },
        <class 'Where'> {
          fields=<class 'dict'> {
            'g': <class 'Between'> {
              lower=7,
              upper=8,
            },
            'h': <class 'OneOf'> {
              options=<class 'tuple'> (
                9,
                10,
              ),
            },
          },
        },
      ),
    },
    '(type_field IN (?, ?, ?))',
    <class 'list'> [
      'int',
      'str',
      'float',
    ],
  )
---
# name: test_sqlite_simplify[simple_and]
  <class 'tuple'> (
    <class 'And'> {
      preds=<class 'tuple'> (
        <class 'Where'> {
          fields=<class 'dict'> {
            'a': <class 'Eq'> {
              expect=1,
            },
          },
        },
        <class 'Where'> {
          fields=<class 'dict'> {
            'b': <class 'Eq'> {
              expect=2,
            },
          },
        },
      ),
    },
    None,
    None,
  )
---
# name: test_sqlite_simplify[simple_is]
  <class 'tuple'> (
    None,
    'type_field IN (?, ?, ?)',
    <class 'list'> [
      'str',
      'int',
      'float',
    ],
  )
---
# name: test_sqlite_simplify[simple_or]
  <class 'tuple'> (
    <class 'Or'> {
      alts=<class 'tuple'> (
        <class 'Where'> {
          fields=<class 'dict'> {
            'a': <class 'Eq'> {
              expect=1,
            },
          },
        },
        <class 'Where'> {
          fields=<class 'dict'> {
            'b': <class 'Eq'> {
              expect=2,
            },
          },
        },
      ),
    },
    None,
    None,
  )
---
# name: test_sqlite_simplify[simple_where]
  <class 'tuple'> (
    <class 'Where'> {
      fields=<class 'dict'> {
        'a': <class 'Eq'> {
          expect=1,
        },
        'b': <class 'NotEq'> {
          value=2,
        },
        'c': <class 'Less'> {
          limit=3,
        },
        'd': <class 'More'> {
          limit=4,
        },
        'e': <class 'LessEq'> {
          limit=5,
        },
        'f': <class 'MoreEq'> {
          limit=6,
        },
        'g': <class 'Between'> {
          lower=7,
          upper=8,
        },
        'h': <class 'OneOf'> {
          options=<class 'tuple'> (
            9,
            10,
          ),
        },
      },
    },
    None,
    None,
  )
---
